server {
    listen 80; # IPv4
    server_name loc.nginx.t1;#这个本地域名，记得在本地hosts里配置下

    access_log logs/t1_access.log;
    error_log logs/t1_error.log;
    root /data/web;

    location = /favicon.ico {
        try_files $uri =204;
        log_not_found off;
        access_log off;
    }
        
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    #今天下班时因为这里配置问题，访问http://local.nginx.t1时出现了403
    #因为按照location的匹配规则，在所有location都不匹配的情况下，最终
    #由 / 来匹配。进入location /这个后，里面的~ \.php$,~* \.xxxxx都不匹配上述的uri，
    #此时就按照访问目录/(表示网站根目录）来算。
    #按照目录访问会走哪些逻辑呢？首先会找目录下的index指令，没有index，那么默认就是index index.html
    #可是yii2的web目录里没有index.html。
    #没有index.html,就去找autoindex on来展示目录下的文件列表。可是也没有autoindex。最后就是403了。
    #这个403会在错误日志中输出
    #还有，我以为的try_files指令可以完成重写功能，但是为啥它没有发挥作用呢？之前对try_files的理解错误了吗？
    #是的，理解错了，try_files的实际功能就像指令名所示，它是尝试判断uri表示的文件或者目录存在与否而做出的不同动作。
    #根据try_files $uri $uri/ /index.php?$query_string;这条指令，访问http://local.nginx.t1时的$uri就是空，$uri/就是/，
    #该目录是存在的，它就是网站根目录。故不会转发到/index.php?$query_string
    #总之 try_files是判断前几个参数表示的文件或文件夹都不存在之后再去执行最后的参数（一般是跳转），否则就去访问之。
    location / {

        ## Regular PHP processing.
	#把误敲的uri都转向到/index.php里
	try_files $uri $uri/ /index.php?$query_string;

	#首先判断index.php而不是index.html
	index index.php;
        
	#~开头的，表示后面可接区分大小写的正则
	location ~ \.php$ {
            #try_files  $uri =404;
            fastcgi_pass   172.17.0.3:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }

	#~* 开头的，表示后面可接不区分大小写的正则
        location ~* \.(?:css|gif|htc|ico|js|jpe?g|png|swf)$ {
            expires max;
            log_not_found off;
            ## No need to bleed constant updates. Send the all shebang in one
            ## fell swoop.
            tcp_nodelay off;
            ## Set the OS file cache.
            open_file_cache max=1000 inactive=120s;
            open_file_cache_valid 45s;
            open_file_cache_min_uses 2;
            open_file_cache_errors off;
        }

        location ~* ^.+\.(?:ogg|pdf|pptx?)$ {
            expires 30d;
            ## No need to bleed constant updates. Send the all shebang in one
            ## fell swoop.
            tcp_nodelay off;
        }
    }

}
